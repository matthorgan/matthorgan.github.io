[
    {
        "ref": "https://matthorgan.xyz/blog/decrypt-secure-string/",
        "title": "Decrypting PowerShell Secure Strings",
        "section": "blog",
        "tags": ["powershell","automation"],
        "date" : "2019.08.15",
        "body": "Ever found yourself needing to decrypt a secure string knowing that there are a couple of static methods you need to use but can never remember what they are? After a quick Google, you\u0026rsquo;ll probably stumble upon something similar to this:\n$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePassword) $UnsecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR) Whilst this works fine, it\u0026rsquo;s way easier to remember (Tab complete is your friend) that a PSCredential object has the ability to show the password by using GetNetworkCredential().Password. So, you can construct a PSCredential object with arbitrary username (I used a whitespace) and access the secure string like so:\n$UnsecurePassword = [PSCredential]::New(\u0026#39; \u0026#39;, $SecurePassword).GetNetworkCredential().Password "
    }
,
    {
        "ref": "https://matthorgan.xyz/blog/register-datawarehouse/",
        "title": "Register-SCDWSource Cmdlet hidden parameter",
        "section": "blog",
        "tags": ["powershell","automation","service manager","system center"],
        "date" : "2018.08.01",
        "body": "Myself and a colleague were recently given the task of end-to-end automation of Sytem Center Service Manager using PowerShell DSC. This needed to include prerequisites, installation of the product, and any post configuration.\nIf any of you are familiar with Service Manager, you\u0026rsquo;ll know that one of the steps is to register Service Manager to the data warehouse. Luckily, there\u0026rsquo;s a PowerShell cmdlet for that which should make the task a breeze: Register-SCDWSource\nLooking at the documentation, I\u0026rsquo;ve modified Microsoft\u0026rsquo;s example to use my credentials and VM names to register the datawarehouse with Service Manager:\n$creds = New-Object -TypeName \u0026#39;PSCredential\u0026#39; -ArgumentList (\u0026#39;lab\\Administrator\u0026#39;, (ConvertTo-SecureString -String \u0026#39;MyLabPassword\u0026#39; -AsPlainText -Force)) Register-SCDWSource -ComputerName \u0026#39;scsmdw1\u0026#39; -SourceComputerName \u0026#39;scsmms1\u0026#39; -DataSourceTypeName \u0026#39;ServiceManager\u0026#39; -Credential $creds When you run this command, a credential request pop-up box appears which would imply that the $creds variable hasn\u0026rsquo;t worked hence the prompt. Looking back at the example online, there\u0026rsquo;s nothing obvious missed and the $creds variable contains a credential object as you\u0026rsquo;d expect.\nUpon cancelling the prompt pop-up box, things started becoming clear:\nI should have paid more attention to the initial message behind the pop-up box - the -Credential parameter and $creds variable were working exactly as expected BUT the Register-SCDWSource cmdlet actually required the SourceCredential parameter too. I tried to use the auto-complete functionality for the SourceCredential parameter but nothing was coming up (and nothing was mentioned about this parameter in the documentation) which filled me with 0% confidence. However, I ended up trying it and to my shock, the cmdlet worked a treat:\n$creds = New-Object -TypeName \u0026#39;PSCredential\u0026#39; -ArgumentList (\u0026#39;lab\\Administrator\u0026#39;, (ConvertTo-SecureString -String \u0026#39;MyLabPassword\u0026#39; -AsPlainText -Force)) Register-SCDWSource -ComputerName \u0026#39;scsmdw1\u0026#39; -SourceComputerName \u0026#39;scsmms1\u0026#39; -DataSourceTypeName \u0026#39;ServiceManager\u0026#39; -Credential $creds -SourceCredential $creds A great lesson here is that we\u0026rsquo;re all human and even Microsoft are going to make mistakes with their documentation and cmdlets. Hopefully the feedback will ensure that they update the documentation and if not then, hopefully this post helps!\n"
    }
,
    {
        "ref": "https://matthorgan.xyz/blog/vagrant-up-not-working/",
        "title": "Error when running 'vagrant up'",
        "section": "blog",
        "tags": ["powershell","automation","vagrant","virtualbox"],
        "date" : "2018.01.16",
        "body": "I\u0026rsquo;ve been using vagrant to build up labs for my work recently and it\u0026rsquo;s an awesome product. One small downside is the sheer amount of space that the new VMs were taking up on my laptop SSD (I\u0026rsquo;d been testing linked clones and hadn\u0026rsquo;t cleaned up after myself). As my whole lab build was in code, I felt rather pleased with myself that I could just bin the whole environment including any VMs and then just spin it up again afterwards. So, off I went to the VirtualBox VM directory (\u0026quot;$env:userprofile\\VirtualBox VMs\u0026quot;). When I looked at the total size of the directory, it was over 100GB in space and because being heavy handed works so well in I.T (Hmm\u0026hellip;), I deleted all of the VMs in the folder.\nRight, time to \u0026lsquo;vagarnt up\u0026rsquo; my lab and sit back and watch the infrastructure as code goodness:\nAH! Perhaps my heavy handed approach probably wasn\u0026rsquo;t the best idea. It seems like there might be some sort of lock on the files Vagrant is trying to use. Wait, there shouldn\u0026rsquo;t be any files needed because they\u0026rsquo;ve all been deleted, right? Looking in VirtualBox shows that it still thinks the VMs exist but are inaccessible (I forgot to grab a screenshot, sorry!). To fix this, I deleted the inaccessible VMs from within VirtualBox and ran a \u0026lsquo;vagrant up\u0026rsquo; again and it imported a fresh box with no errors.\nAs I\u0026rsquo;m using linked clones for my environment, Vagrant must have been looking for the initial clone that my lab was supposed to be using (The one that I\u0026rsquo;d heavy handedly deleted). As VirtualBox still thought it had the clone in existence, Vagrant was spitting out errors when trying to build the lab.\n"
    }
,
    {
        "ref": "https://matthorgan.xyz/blog/powershell-dsc-resourcekey-empty/",
        "title": "PowerShell DSC ResourceKey Empty",
        "section": "blog",
        "tags": ["powershell","automation","dsc","sql"],
        "date" : "2018.01.04",
        "body": "I\u0026rsquo;m absolutely loving PowerShell DSC at the moment and we\u0026rsquo;re using it heavily for the automation and configuration of various products. One of the most recent tasks was to create a fully parameterised SQL build function for reusability across the company. All was going swimmingly until I ran into the following error when attempting to run my freshly parameterised DSC function:\nAfter a little bit of digging, I stumbled across a great blog post by Jacob Benson which had some nice troubleshooting steps (Link here). This blog pointed me in the right direction - the key property of the DSC resource always has to be present. Well, weirdly, all of my parameters were being correctly passed through because I\u0026rsquo;d verified that in a verbose message:\nI had a quick look in the MOF file for the DSC resource I was using (SqlSetup in SqlServerDsc)and noted that the key was \u0026lsquo;InstanceName\u0026rsquo;. I then changed the InstanceName parameter to a hardcoded value and re-ran the configuration\u0026hellip; BINGO! It worked absolutely fine which meant there must have been something wrong with my InstanceName parameter.\nA DSC configuration will automatically have three default parameters when it is created - InstanceName, OutputPath, and ConfigurationData. After rolling back to a fresh snapshot in my lab, I decided to change the name of the parameter I was using for InstanceName because I\u0026rsquo;d actually just called it $InstanceName for simplicity. I renamed it to $SqlInstanceName and re-ran the configuration and SQL installed like a charm.\nI\u0026rsquo;ve never had to use the default parameter \u0026lsquo;InstanceName\u0026rsquo; for any of my configurations so it took me a while to realise what was going wrong. However, when you think that any variables with the same names as default parameter names are going to be overwritten with the default parameter values, it makes perfect sense. The original error wasn\u0026rsquo;t misleading at all - \u0026lsquo;ResourceKey\u0026rsquo; WAS an empty string and next time I\u0026rsquo;ll be more careful with my function parameter names to ensure they don\u0026rsquo;t clash with any DSC configuration default parameters.\n"
    }
,
    {
        "ref": "https://matthorgan.xyz/blog/invoke-command-grouppolicy-problem/",
        "title": "Invoke-Command Group Policy Gotcha (Whoops!)",
        "section": "blog",
        "tags": ["powershell","automation","invoke-command","gpupdate /force"],
        "date" : "2017.07.09",
        "body": "A task that I\u0026rsquo;ve been working on recently is the automation of VM builds and post configuration using PowerShell and the PowerCLI module (Unfortunately we don\u0026rsquo;t have a configuration management tool to make our lives easier at the moment).\nPart of the post-build configuration is to run a bunch of commands on the newly built VMs. I could have used PowerCLI\u0026rsquo;s Invoke-VMScript command to achieve this however as all of the VMs were joining the domain and tools on some of the VM templates were out of date, I used PowerShell\u0026rsquo;s Invoke-Command. This was going swimmingly until I ran into an issue\u0026hellip;\nThe final requirement of the initial post configuration was to force refresh Group Policy on the machine. Easy right?\nInvoke-Command -ComputerName $VmName -ScriptBlock {gpupdate /force} Upon running this command, I was faced with absolutely nothing being returned - the prompt was just hanging. Eh?! So, what happens if I just run a gpupdate without the force switch?\nRight, so that works perfectly. Hmm, maybe the sheer number of policies that need to apply is slowing things down? What happens if we try a VM that already has the right policies?\nOK, so this seems to imply that the issue is purely with the initial application of the policies. The next step is to RDP onto the VM and try the command locally to see what gets returned:\nBingo! The Group Policy update was working fine but required a reboot. Of course Invoke-Command isn\u0026rsquo;t going to return anything if the remote command it\u0026rsquo;s running is sat waiting for user input.\nResolution Armed with the above information, the solution was rather simple - gpupdate has a /boot flag which reboots the VM if required. So all that we needed to get Invoke-Command working correctly was:\nInvoke-Command -ComputerName $VmName -ScriptBlock {gpupdate /force /boot} The take-away here is to always consider that a particular command might not behave the same way you\u0026rsquo;ve seen it behave on other machines in the past. As a side note, if there wasn\u0026rsquo;t a /boot switch then you could probably spoof the user input required by doing something like:\nInvoke-Command -ComputerName $VmName -ScriptBlock {echo \u0026#34;Y\u0026#34; | gpupdate /force} "
    }
]
